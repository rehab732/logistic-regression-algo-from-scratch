# -*- coding: utf-8 -*-
"""Logistic_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wuCjGKaf1YsmqhMB5YxhGYgPlR8QWTLH
"""

import pandas as pd
import numpy as np
from math import exp
from random import randrange

"""# `Read the data file`"""

heart_data= pd.read_csv('/content/heart.csv')
heart_data

"""# `split data ( predictors , target )`"""

x=heart_data.loc[:,['trestbps','thalach','chol','oldpeak','target']] # x1 , x2 , x3 , x4 , t
x.head()

print(type(x))

x=x.values    #convert the dataframe to numpy array

# Find min and max values for each column
def min_max(data):
	minmax = list()
	for i in range(len(data[0])):
		col_values = [row[i] for row in data]
		value_min = min(col_values)
		value_max = max(col_values)
		minmax.append([value_min, value_max])
	return minmax

# Rescale data columns to the range 0-1
def normalize_data(data, minmax):
	for row in data:
		for i in range(len(row)):
			row[i] = (row[i] - minmax[i][0]) / (minmax[i][1] - minmax[i][0])

# Split the data into k folds
def cross_validation_split(data, n_folds):
	data_split = list()
	data_copy = list(data)
	fold_size = int(len(data) / n_folds)
	for i in range(n_folds):
		fold = list()
		while len(fold) < fold_size:
			index = randrange(len(data_copy))
			fold.append(data_copy.pop(index))
		data_split.append(fold)
	return data_split

def accuracy(actual_true, predicted):   #Calculate accuracy percentage
	correct = 0
	for i in range(len(actual_true)):
		if actual_true[i] == predicted[i]:
			correct += 1
	return correct / float(len(actual_true)) * 100.0

# Train_test_split
def evaluate(data, algorithm, n_folds, *args):   # Evaluate an algorithm using a cross validation split
	folds = cross_validation_split(data, n_folds)
	scores = list()
	for fold in folds:
		train_set = list(folds)
		train_set = sum(train_set, [])
		test_set = list()
		for row in fold:
			row_copy = list(row)
			test_set.append(row_copy)
			row_copy[-1] = None
		predicted = algorithm(train_set, test_set, *args)
		actual_true = [row[-1] for row in fold]
		accur = accuracy(actual_true, predicted)
		scores.append(accur)
	return scores

# Make a prediction with coefficients 'weights'
def predict(r, c):          # r is 'row' , c is 'coefficients'
	ypredict = c[0]
	for i in range(len(r)-1):
		ypredict += c[i + 1] * r[i]
	return 1.0 / (1.0 + exp(-ypredict))

# Update logistic regression coefficients 'weights' using gradient descent
def coefficients_gd(train, l_rate, n_epoch):
	coef = [0.0 for i in range(len(train[0]))]
	for epoch in range(n_epoch):
		sum_error = 0
		for row in train:
			ypredict = predict(row, coef)
			error = row[-1] - ypredict
			sum_error += error**2                                    # sum squared error 
			coef[0] = coef[0] + l_rate * error * ypredict * (1.0 - ypredict) # update weights
			for i in range(len(row)-1):
				coef[i + 1] = coef[i + 1] + l_rate * error * ypredict * (1.0 - ypredict) * row[i]
		print('>epoch=%d, lrate=%.3f, error=%.3f' % (epoch, l_rate, sum_error))
	return coef

# Linear Regression Algorithm With Stochastic Gradient Descent
def logistic_regression(train, test, l_rate, n_epoch):
	predictions = list()
	coef = coefficients_gd(train, l_rate, n_epoch)
	for row in test:
		ypredict = predict(row, coef)
		ypredict = round(ypredict)
		predictions.append(ypredict)
	return(predictions)

minmax = min_max(x)
normalize_data(x, minmax)
n_folds = 5
l_rate = 0.1789                 #If learning rate increases, the error increases
n_epoch = 100
scores = evaluate(x, logistic_regression, n_folds, l_rate, n_epoch)
print('Scores: %s' % scores)
print('Mean Accuracy: %.3f%%' % (sum(scores)/float(len(scores))))